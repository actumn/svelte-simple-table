{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/components/Table.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher } from 'svelte';\n\n  export let pk = '';\n  export let columns = [];\n  export let data = [];\n  export let rowPerPage = 10;\n\n  $: sortBy = pk;\n  let sortOrder = 1;\n  let filterOptions = [];\n  let filterAddState = false;\n  let newFilter = {\n    key: '',\n    op: '',\n    value: '',\n  };\n  let currentPage = 0;\n\n\n  $: filteredData = data\n    .filter((row) => {\n      if (filterOptions.length === 0) \n        return true;\n\n      for (let filter of filterOptions) {\n        if (filter.op == '=') {\n          const rowData = row[filter.key]; \n          if (typeof(rowData) === 'string' && rowData === filter.value) return true\n          if (typeof(rowData) === 'number' && rowData === Number(filter.value)) return true;\n          if (typeof(rowData) === 'boolean' && rowData === Boolean(filter.value)) return true;\n        }\n\n        if (filter.op == '>' && row[filter.key] > filter.value) {\n          return true;\n        }\n\n        if (filter.op == '<' && row[filter.key] < filter.value) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n  $: totalPage = Math.floor(filteredData.length / rowPerPage);\n  $: rows = filteredData\n    .sort((a, b) => {\n      if (a[sortBy] > b[sortBy]) return sortOrder;\n      else if (a[sortBy] < b[sortBy]) return -sortOrder;\n      return 0;\n    })\n    .slice(currentPage * rowPerPage, (currentPage + 1) * rowPerPage);\n\n\n  const handleClickCol = (col) => {\n    if (col === sortBy) {\n      sortOrder = -sortOrder;\n    }\n    else {\n      sortOrder = 1;\n    }\n\n    sortBy = col;\n  };\n\n\n  function addFilter() {\n    if (newFilter.key === '' || newFilter.op === '', newFilter.value === '') return;\n\n    filterOptions = [\n      ...filterOptions,\n      {\n        key: newFilter.key,\n        op: newFilter.op,\n        value: newFilter.value.trim(),\n      }\n    ];\n  }\n\n  function removeFilter(rowFilter) {\n    filterOptions = filterOptions.filter(f => f !== rowFilter);\n  }\n\n  function removeRowMark(row) {\n    row.$remove = row.$remove ? !row.$remove : true;\n  }\n\n  function removeRows() {\n    data = data.filter(d => !d.$remove);\n  }\n\n  function exportCSV() {\n    console.log('csv');\n    let link = document.createElement('a'); \n    let csvData = columns.join(',') + '\\n';\n    for (let row of filteredData) {\n      for (let col of columns) {\n        csvData += (row[col] || '') + ',';\n      }\n\n      csvData += '\\n';\n    }\n\n    link.download = \"myFirstExample.csv\"; \n    link.href = 'data:application/vhd.ms-excel,'+csvData;\n    link.click();\n  }\n</script>\n\n<h3>Filter</h3>\n{#each filterOptions as filter, n}\n  <div class='filter'>\n    {filter.key} {filter.op} {filter.value}\n    <button on:click=\"{() => removeFilter(filter)}\">remove</button>\n  </div>\n{/each}\n{#if filterAddState}\n  <select\n    bind:value={newFilter.key}>\n    <option value={undefined}></option>\n    {#each columns as col} \n      <option value={col}>{col}</option>\n    {/each}\n  </select>\n  <select\n    bind:value={newFilter.op}>\n    <option value={undefined}></option>\n    <option value='='> &equals; </option>\n    <option value='>'> &lt; </option>\n    <option value='<'> &gt; </option>\n  </select>\n  <input type=text\n    bind:value={newFilter.value}>\n  <button on:click={() => addFilter()}>Add</button>\n{/if}\n<button on:click={() => filterAddState = !filterAddState}>\n  {filterAddState ? 'Close' : 'Add'}\n</button>\n\n<h3>Table</h3>\n<button on:click={exportCSV}>Export to Csv</button>\n<div class='table-wrap'>\n  <table class='table'>\n    <tr>\n      {#each columns as col}\n        <th\n          class:fixed={col === pk}\n          on:click={() => handleClickCol(col)}\n        >\n          {col}\n          {#if sortBy === col}\n            { sortOrder === 1 ? '▲' : '▼'}\n          {/if}\n        </th>\n      {/each}\n      <th>remove</th>\n    </tr>\n    {#each rows as row, n (row[pk])}\n      <tr>\n        {#each columns as col}\n        <td\n          class:fixed={col === pk}\n        >\n          {row[col] || ''}\n        </td>\n        {/each}\n        <td>\n          <label><input type=checkbox class='checkbox' checked={row.$remove} on:change={() => removeRowMark(row)}></label>\n        </td>\n      </tr>\n    {/each}\n  </table>\n</div>\n<button on:click={() => removeRows()}>remove rows</button>\n<div class=\"page\">\n  <button on:click={() => currentPage = Math.max(0, currentPage - 1)}>◀</button>\n  {currentPage + 1} / {totalPage + 1}\n  <button on:click={() => currentPage = Math.min(totalPage, currentPage + 1)}>▶</button>\n</div>\n\n<style>\n  .checkbox {\n    align-self: center\n  }\n\n\t.filter {\n\t\tposition: relative;\n\t\tline-height: 1.2;\n\t\tpadding: 0.5em 2.5em 0.5em 2em;\n\t\tborder-radius: 2px;\n\t\tborder: 1px solid hsl(240, 8%, 70%);\n\t\tbackground-color:hsl(240, 8%, 93%);\n\t\tcolor: #333;\n\t}\n  .page {\n    width: 100%;\n  }\n\n\n  .table-wrap {\n    display: block;\n    position: relative;\n    max-width: 100vw;\n    \n    /* 100view height - paginator height */\n    max-height: calc(100vh - 95px);\n    overflow-x: auto;\n  }\n\n  .table-wrap .table {\n    width: 100%;\n    border-collapse: collapse;\n  }\n  \n  .table-wrap .table tr:active td, .table-wrap .table tr:active td {\n    background-color: wheat;\n  }\n\n  \n  .table-wrap .table tr:hover {\n    cursor: pointer;\n  }\n\n  .table-wrap .table tr:hover td {\n    background-color: antiquewhite;\n  }\n\n  .table-wrap .table tr:first-child th, .table-wrap .table tr:first-child td {\n\n    position: sticky;\n    box-shadow: inset 0 1px 0 gray,\n                inset 0 -1px 0 gray;\n    top: 0px;\n  }\n\n  .table-wrap .table th {\n    background-color: #eeeeee;\n  }\n\n  .table-wrap .table th, .table-wrap .table td {\n    height: 50px;\n    min-width: 170px;\n    border: 1px solid gray;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAqLE,SAAS,aAAC,CAAC,AACT,UAAU,CAAE,MAAM;EACpB,CAAC,AAEF,OAAO,aAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,WAAW,CAAE,GAAG,CAChB,OAAO,CAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAC9B,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CACnC,iBAAiB,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAClC,KAAK,CAAE,IAAI,AACZ,CAAC,AACA,KAAK,aAAC,CAAC,AACL,KAAK,CAAE,IAAI,AACb,CAAC,AAGD,WAAW,aAAC,CAAC,AACX,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,KAAK,CAGhB,UAAU,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAC9B,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,wBAAW,CAAC,MAAM,aAAC,CAAC,AAClB,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,QAAQ,AAC3B,CAAC,AAED,wBAAW,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,eAAE,CAAE,wBAAW,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,EAAE,aAAC,CAAC,AAChE,gBAAgB,CAAE,KAAK,AACzB,CAAC,AAGD,wBAAW,CAAC,MAAM,CAAC,eAAE,MAAM,AAAC,CAAC,AAC3B,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,wBAAW,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,EAAE,aAAC,CAAC,AAC9B,gBAAgB,CAAE,YAAY,AAChC,CAAC,AAED,wBAAW,CAAC,MAAM,CAAC,EAAE,YAAY,CAAC,eAAE,CAAE,wBAAW,CAAC,MAAM,CAAC,EAAE,YAAY,CAAC,EAAE,aAAC,CAAC,AAE1E,QAAQ,CAAE,MAAM,CAChB,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAC/B,GAAG,CAAE,GAAG,AACV,CAAC,AAED,wBAAW,CAAC,MAAM,CAAC,EAAE,aAAC,CAAC,AACrB,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,wBAAW,CAAC,MAAM,CAAC,eAAE,CAAE,wBAAW,CAAC,MAAM,CAAC,EAAE,aAAC,CAAC,AAC5C,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACxB,CAAC"
}